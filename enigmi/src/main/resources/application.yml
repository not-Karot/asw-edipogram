# application.yml
---
spring:
  application: 
    name: enigmi
  cloud:
    consul:
      host: consul
      port: 8500
      discovery: 
        instanceId: ${spring.application.name}-${spring.cloud.client.hostname}-${random.value}
        healthCheckPath: /actuator/health
        healthCheckInterval: 10s
        # configurazione per effettuare esprimenti, NON USARE UN PRODUZIONE 
        # dopo quanto tempo consul deve smettere di restituire servizi che non rispondono all'health check? 
        healthCheckCriticalTimeout: 45s
        # consul deve restituire solo servizi che passano l'health check (default=false) 
        queryPassing: true
        prefer-ip-address: true
    loadbalancer: 
      ribbon.enabled: false
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    generate-ddl: true
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  datasource:
    url: jdbc:postgresql://enigmiservicedb:5432/enigmiServiceDB
    username: postgres
    password: root
    driver-class-name: org.postgresql.Driver
  kafka:
    producer:
      bootstrap-servers: kafka:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring:
          json:
            type:
              mapping: EnigmaCreatedEvent:asw.edipogram.enigmi.event.EnigmaCreatedEvent

server: 
  port: ${PORT:${SERVER_PORT:0}}
#  port: 8080

# fa il logging dei comandi sql eseguiti 
#spring.jpa.show-sql: true
# disable OSIV
spring.jpa.open-in-view: false
